# Weather Station Logger - Project 13

A collection of Python programs demonstrating fundamental data types through a weather monitoring system. Each program focuses on a specific data type while maintaining a consistent weather station theme.

## üìÅ Project Structure

```
weather-station-logger/
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ simple_integers_demo.py
‚îú‚îÄ‚îÄ simple_strings_demo.py
‚îú‚îÄ‚îÄ simple_booleans_demo.py
‚îú‚îÄ‚îÄ simple_lists_demo.py
‚îú‚îÄ‚îÄ simple_arrays_demo.py
‚îî‚îÄ‚îÄ simple_dictionaries_demo.py
```

## üéØ Project Overview

This project demonstrates six fundamental Python data types through practical weather station applications:

- **Integers**: Temperature readings and calculations
- **Strings**: Weather report formatting and f-strings
- **Booleans**: Threshold conditions and safety assessments
- **Lists**: Sensor data management and sorting
- **Arrays**: Memory-efficient numeric data storage
- **Dictionaries**: Weather station records with CRUD operations

## üìã Requirements Met

Each demo fulfills specific project requirements:

### ‚úÖ **Integers Application** (`simple_integers_demo.py`)
- Generate integer temperature values from multiple sensors
- Compute total, average, minimum, and maximum values
- Categorize readings and count occurrences
- **Run**: `python simple_integers_demo.py`

### ‚úÖ **Strings Application** (`simple_strings_demo.py`)
- Create formatted weather station reports
- **Two f-strings** summarizing totals and averages (required)
- String manipulation and comparison operations
- **Run**: `python simple_strings_demo.py`

### ‚úÖ **Booleans Application** (`simple_booleans_demo.py`)
- Apply threshold conditions to weather data
- Print "Above Standard" or "Below Standard" based on averages
- **Compound boolean conditions** with AND, OR, NOT operators (required)
- Safety assessments using boolean logic
- **Run**: `python simple_booleans_demo.py`

### ‚úÖ **Lists Application** (`simple_lists_demo.py`)
- Maintain temperature reading lists
- **Add new elements** (append, extend, insert)
- **Remove elements based on conditions** (temperatures > 90¬∞F)
- **Sort and display** lists before and after modifications
- **Run**: `python simple_lists_demo.py`

### ‚úÖ **Arrays Application** (`simple_array_demo.py`)
- Use Python's **array module** for fixed-size numeric data
- Store weather station temperature subset
- **Compute array sum and compare with list version**
- Demonstrate memory efficiency
- **Run**: `python simple_array_demo.py`

### ‚úÖ **Dictionaries Application** (`simple_dictionaries_demo.py`)
- Build list of weather station dictionaries
- Each with **'id', 'name', and 'value' fields** (required)
- **Update one record** and **delete another**
- **Compute total of 'value' field** across all records
- **Run**: `python simple_dictionaries_demo.py`

## üöÄ Quick Start

### Prerequisites
- Python 3.6 or higher
- No external dependencies required

### Running Individual Demos

```bash
# Run integers demonstration
python simple_integers_demo.py

# Run strings demonstration  
python simple_strings_demo.py

# Run booleans demonstration
python simple_booleans_demo.py

# Run lists demonstration
python simple_lists_demo.py

# Run arrays demonstration
python simple_array_demo.py

# Run dictionaries demonstration
python simple_dictionaries_demo.py
```

### Running All Demos
```bash
# Run all demonstrations in sequence
python simple_integers_demo.py && python simple_strings_demo.py && python simple_booleans_demo.py && python simple_lists_demo.py && python simple_array_demo.py && python simple_dictionaries_demo.py
```

## üìä Sample Output

### Integers Demo Output:
```
INTEGER DATA TYPE APPLICATION
========================================
Temperature readings:
Sensor 1: 75¬∞F
Sensor 2: 82¬∞F
Sensor 3: 68¬∞F
Sensor 4: 91¬∞F
Sensor 5: 77¬∞F

COMPUTATIONS:
Total: 393¬∞F
Average: 78¬∞F
Minimum: 68¬∞F
Maximum: 91¬∞F
Range: 23¬∞F
```

### Arrays Demo Output:
```
ARRAY DATA TYPE APPLICATION
========================================
Temperature list: [75, 82, 68, 91, 77, 85, 79, 73]
Temperature array: [75, 82, 68, 91, 77, 85, 79, 73]
Array type: i

COMPARING SUMS:
List sum: 630¬∞F
Array sum: 630¬∞F
Sums match: True
```

##  Technical Details

### Data Types Covered
- **int**: Whole numbers (temperatures, counts)
- **str**: Text data (station names, reports)  
- **bool**: True/False conditions (thresholds, safety)
- **list**: Ordered collections (sensor readings)
- **array**: Memory-efficient numeric arrays
- **dict**: Key-value pairs (station records)

### Key Concepts Demonstrated
- **Mathematical Operations**: Sum, average, min, max
- **String Formatting**: F-strings, concatenation
- **Boolean Logic**: Compound conditions, comparisons
- **List Management**: CRUD operations, sorting
- **Memory Efficiency**: Arrays vs lists comparison
- **Data Structures**: Dictionaries for structured data

## üå°Ô∏è Weather Station Context

All demos use realistic weather monitoring scenarios:
- **Temperature readings** in Fahrenheit
- **Weather station identifiers** (S001, S002, etc.)
- **Sensor locations** (Downtown, Airport, Park, Harbor)
- **Threshold monitoring** for safety and comfort
- **Data logging** and reporting functionality

## üìö Learning Objectives

After running these demos, you will understand:
1. **Integer arithmetic** and statistical calculations
2. **String manipulation** and formatted output
3. **Boolean logic** and conditional statements  
4. **List operations** and data management
5. **Array efficiency** and memory considerations
6. **Dictionary structures** and CRUD operations

## Customization

### Modifying Temperature Data
```python
# In any demo file, change the temperature values:
temperatures = [75, 82, 68, 91, 77]  # Your custom temperatures
```

### Adjusting Thresholds
```python
# In booleans demo, modify threshold values:
temp_threshold = 75.0  # Change to your preferred threshold
humidity_threshold = 60.0  # Modify humidity threshold
```

### Adding New Stations
```python
# In dictionaries demo, add more stations:
{'id': 'S005', 'name': 'Your Station', 'value': 80.0}
```

##  Troubleshooting

### Common Issues
- **Python version**: Ensure Python 3.6+ is installed
- **File permissions**: Make sure scripts are executable
- **Array module**: Should be available in standard Python installation

### Error Messages
- `ModuleNotFoundError`: Check Python installation
- `SyntaxError`: Verify Python version compatibility
- `FileNotFoundError`: Ensure you're in the correct directory

##  Extensions

### Possible Enhancements
- Add more weather parameters (pressure, wind speed)
- Implement data persistence (file I/O)
- Create graphical visualization
- Add error handling and validation
- Implement network connectivity for real sensors

## License

This project is for educational purposes. Feel free to modify and extend for learning objectives.

## üë• Contributing

This is a learning project. Students are encouraged to:
- Modify threshold values
- Add new weather parameters  
- Extend functionality
- Improve output formatting

---

Project 13: Weather Station Logger** - Demonstrating Python data types through practical weather monitoring applications.